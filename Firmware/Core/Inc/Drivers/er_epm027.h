
#ifndef INC_ER_EPM027_H_
#define INC_ER_EPM027_H_

#include "main.h"
#include "stdint.h"

#define ER_EPM027_WIDTH 176
#define ER_EPM027_HEIGHT 264

#define ER_EPM027_STATE_BUSY 0x00
#define ER_EPM027_STATE_IDLE 0x01

#define ER_EPM027_CMD_PANEL_SETTING 0x00
#define ER_EPM027_CMD_POWER_SETTING 0x01
#define ER_EPM027_CMD_POWER_OFF 0x02
#define ER_EPM027_CMD_POWER_OFF_SEQUENCE_SETTING 0x03
#define ER_EPM027_CMD_POWER_ON 0x04
#define ER_EPM027_CMD_POWER_ON_MEASURE 0x05
#define ER_EPM027_CMD_BOOSTER_SOFT_START 0x06
#define ER_EPM027_CMD_DEEP_SLEEP 0x07
#define ER_EPM027_CMD_DATA_START_TRANSMISSION_1 0x10
#define ER_EPM027_CMD_DATA_STOP 0x11
#define ER_EPM027_CMD_DISPLAY_REFRESH 0x12
#define ER_EPM027_CMD_DATA_START_TRANSMISSION_2 0x13
#define ER_EPM027_CMD_PARTIAL_DATA_START_TRANSMISSION_1 0x14
#define ER_EPM027_CMD_PARTIAL_DATA_START_TRANSMISSION_2 0x15
#define ER_EPM027_CMD_PARTIAL_DISPLAY_REFRESH 0x16
#define ER_EPM027_CMD_LUT_FOR_VCOM 0x20
#define ER_EPM027_CMD_LUT_WHITE_TO_WHITE 0x21
#define ER_EPM027_CMD_LUT_BLACK_TO_WHITE 0x22
#define ER_EPM027_CMD_LUT_WHITE_TO_BLACK 0x23
#define ER_EPM027_CMD_LUT_BLACK_TO_BLACK 0x24
#define ER_EPM027_CMD_PLL_CONTROL 0x30
#define ER_EPM027_CMD_TEMPERATURE_SENSOR_COMMAND 0x40
#define ER_EPM027_CMD_TEMPERATURE_SENSOR_CALIBRATION 0x41
#define ER_EPM027_CMD_TEMPERATURE_SENSOR_WRITE 0x42
#define ER_EPM027_CMD_TEMPERATURE_SENSOR_READ 0x43
#define ER_EPM027_CMD_VCOM_AND_DATA_INTERVAL_SETTING 0x50
#define ER_EPM027_CMD_LOW_POWER_DETECTION 0x51
#define ER_EPM027_CMD_TCON_SETTING 0x60
#define ER_EPM027_CMD_TCON_RESOLUTION 0x61
#define ER_EPM027_CMD_SOURCE_AND_GATE_START_SETTING 0x62
#define ER_EPM027_CMD_GET_STATUS 0x71
#define ER_EPM027_CMD_AUTO_MEASURE_VCOM 0x80
#define ER_EPM027_CMD_VCOM_VALUE 0x81
#define ER_EPM027_CMD_VCM_DC_SETTING_REGISTER 0x82
#define ER_EPM027_CMD_PROGRAM_MODE 0xA0
#define ER_EPM027_CMD_ACTIVE_PROGRAM 0xA1
#define ER_EPM027_CMD_READ_OTP_DATA 0xA2

void ER_EPM027_turnOn(void);
void ER_EPM027_turnOff(void);
void ER_EPM027_sleep();
void ER_EPM027_init(SPI_HandleTypeDef* spiHandler);
void ER_EPM027_sendSection(const uint8_t* buffer, uint16_t x, uint16_t y, uint16_t w, uint16_t l);
void ER_EPM027_drawSection(uint16_t x, uint16_t y, uint16_t w, uint16_t l);
void ER_EPM027_sendScreen(const uint8_t* imageBuffer, uint16_t width, uint16_t height);
void ER_EPM027_drawScreen(void);
void ER_EPM027_clearScreen(void);

#endif